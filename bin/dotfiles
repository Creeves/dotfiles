#!/usr/bin/env bash

# Header logging
function e_header() {
    printf "$(tput setaf 5)%s$(tput sgr0)\n" "$@"
}

# Success logging
function e_success() {
    printf "$(tput setaf 2)✔ %s$(tput sgr0)\n" "$@"
}

# Info logging
function e_info() {
    printf "$(tput setaf 6)%s$(tput sgr0)\n" "$@"
}

# Error logging
function e_error() {
    printf "$(tput setaf 1)✘ %s$(tput sgr0)\n" "$@"
}

# Warning logging
function e_warning() {
    printf "$(tput setaf 136)! %s$(tput sgr0)\n" "$@"
}

# Check for git
if [ ! $(type -P git) ]; then
    e_error "Aborting. Git not installed"
    exit 1
fi

#
if [ -d $HOME/.dotfiles ]; then
    cd $HOME/.dotfiles
else

    #
    if [ -f $HOME/.dotfiles ]; then
        cd $(<$HOME/.dotfiles)
    else

        #
        if [ $PWD == $HOME ]; then
            mkdir .dotfiles
            cd .dotfiles
        else
            echo "${PWD%/}" > $HOME/.dotfiles
        fi

    fi

fi

# Initialize the git repository if it's missing
if [ ! -d .git ]; then

    e_header "Fetching repo..."

    #
    git clone https://github.com/whitneyit/dotfiles.git temp

    #
    e_info "Repo located at: \"$PWD\""

    #
    mv temp/.git ./.git
    rm -rf temp

    #
    git reset --hard
    git clean -dfx

    #
    PATH="./bin:$PATH"

    #
    if [ -d $HOME/.dotfiles ]; then
        DOTFILES_DIRECTORY=$HOME/.dotfiles
    else
        DOTFILES_DIRECTORY=$(<$HOME/.dotfiles)
    fi

    #
    export DOTFILES_DIRECTORY

    #
    source ./lib/utils

    #
    e_header "Fetching submodules..."
    git submodule update --recursive --init
    git pull origin master --quiet

    # Here we make sure that we don't track changes to the docs `tags`
    # sed -i 's/"vim\/bundle\/snipmate.vim"]/"vim\/bundle\/snipmate.vim"]\n\tignore = dirty/' .gitmodules
    # sed -i 's/"vim\/bundle\/vim-multiple-cursors"]/"vim\/bundle\/vim-multiple-cursors"]\n\tignore = dirty/' .gitmodules

    #
    e_header "Linking files..."
    link_files $PWD

    #
    e_info "Updating origin url..."
    git remote set-url origin git@github.com:whitneyit/dotfiles.git

    #
    e_success "Dotfiles update complete"
    exit
fi

#
source ./lib/utils
source ./lib/help
source ./lib/list

# Help text
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    run_help
    exit
fi

# List additional software to install
if [[ "$1" == "-l" || "$1" == "--list" ]]; then
    run_list
    exit
fi

# Remove the exists symlinks
if [[ "$1" == "-r" || "$1" == "--remove" ]]; then
    run_remove
    exit
fi

# Test for known flags
for opt in $@
do
    case $opt in
        -*|--*) e_warning "Warning: invalid option $opt" ;;
    esac
done

#
e_header "Updating repo..."
git reset --hard --quiet
git pull origin master

#
e_header "Updating submodules..."
git submodule update --recursive --init
git pull origin master --quiet

#
e_header "Linking files..."
link_files $PWD

#
e_success "Dotfiles update complete"
exit

# vim: set syn=sh :
