#!/bin/bash

#
REPO_NAME=".dotfiles"

#
DOTFILES_DIRECTORY="${HOME}/${REPO_NAME}"
DOTFILES_ROOT_BACKUP_DIRECTORY="${DOTFILES_DIRECTORY}/backups"

# Header logging
e_header() {
    printf "$(tput setaf 5)%s$(tput sgr0)\n" "$@"
}

# Success logging
e_success() {
    printf "$(tput setaf 64)✔ %s$(tput sgr0)\n" "$@"
}

# Error logging
e_error() {
    printf "$(tput setaf 1)✘ %s$(tput sgr0)\n" "$@"
}

# Warning logging
e_warning() {
    printf "$(tput setaf 136)! %s$(tput sgr0)\n" "$@"
}

# Test whether we're in a git repo
is_git_repo() {
    $(git rev-parse --is-inside-work-tree &> /dev/null)
}

# Check for git
if [ ! $(type -P git) ]; then
    e_error 'Aborting! Git not installed!'
    exit 1
fi

#
# if [ ! -d ${DOTFILES_DIRECTORY} ]; then
#     mkdir ${DOTFILES_DIRECTORY}
# fi

#
# cd ${DOTFILES_DIRECTORY}

# Initialize the git repository if it's missing
if [ ! -d .git ]; then

    e_header 'Fetching repo...'

    git clone https://github.com/whitneyit/dotfiles.git temp

    mv temp/.git ./.git

    rm -rf temp

    git reset --hard

    git clean -fd
fi

#
source ./lib/utils
source ./lib/help
source ./lib/list

# Help text
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    run_help
    exit
fi

# List additional software to install
if [[ "$1" == "-l" || "$1" == "--list" ]]; then
    run_list
    exit
fi

# Remove the exists symlinks
if [[ "$1" == "-r" || "$1" == "--remove" ]]; then
    run_remove
    exit
fi

# Test for known flags
for opt in $@
do
    case $opt in
        -*|--*) e_warning "Warning: invalid option $opt" ;;
    esac
done

#
e_header 'Updating repo...'
git reset --hard --quiet
git pull origin master

e_header 'Updating submodules...'
git submodule update --recursive --init 
git pull origin master --quiet

#
link_files

#
e_success 'dotfiles update complete!'

cd $HOME

# vim: set syn=sh :
